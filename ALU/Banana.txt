# starting loop

.start
#create player  player coordinate x = 80 y = 400
MOVI $80 r1
LUI $23 r3
ADDI $112 r3
STOR r1 r3
ADDI $4 r3
LUI $1 r5
ADDI $0 r5
STOR r5 r3

#create platforms
LUI $1 r2
ADDI $154 r2 # set platform 1 y coordinate 10 below the player
ADDI $4 r3
STOR r1 r3
ADDI $4 r3
STOR r2 r3
#platform 2
LUI $1 r1
ADDI $144 r1
MOVI $10 r2
ADDI $4 r3
STOR r1 r3
ADDI $4 r3
STOR r2 r3

#check button input
.loop
LUI $255 r3
ADDI $255 r3
LOAD r1 r3
MOVI $1 r2
CMP r1 r2
BNE .loop
LUI $255 r8
ADDI $255 r8 # this loads value -255 into the velocity register 
MOVI $0 r9 # load 0 into r9 for counting 

#gameloop to be run
.gameloop

#check input buttons and move character
LUI $255 r2
ADDI $255 r2
LOAD r1 r2
CMP r0 r1
BEQ .noButton # jump as no buttons are pressed

MOVI $2 r2 # check if left
CMP r2 r1
BNE .rightCheck # jump if not left

#handle case where left is pushed
MOVI $0 r3
LUI $23 r3
ADDI $112 r3
LOAD r4 r3 #store player x coordinate in r4
SUBI $5 r5 #subtract 5 from x coordinate
STOR r4 r3 #store new x player value

#check if right
.rightCheck
MOVI $3 r2 # check if right
CMP r2 r1
BNE  .noButton # jump if not right
MOVI $0 r3
LUI $23 r3
ADDI $112 r3
LOAD r4 r3 #store player x coordinate in r4
ADDI $5 r5 #subtract 5 from x coordinate
STOR r4 r3 #store new x player value
.noButton

#move platforms

LUI $23 r3
ADDI $124 r3 # memory location for y coordinate 1st platform
LOAD r4 r3
SUB r8 r4 #sub the speed from the 1st platform
STOR r4 r3
ADDI $8 r3
LOAD r4 r3
SUB r8 r4 #sub the speed from the 2nd platform
STOR r4 r3

#decrement speed
MOVI $60 r1
CMP r9 r1
BNE .incrementCount 
ADDI $0 r8
MOVI $0 r9
BUC .noincrement
.incrementCount
ADDI $0 r9
.noincrement

#check if player is out of bounds by checking if walls are above the screen
LUI $128 r1
LUI $23 r3
ADDI $124 r3
LOAD r4 r3 # load y coordinate of first platform
CMP r1 r4 # compare first platform y to negative number
BLT .notDead
ADDI $8 r3 # get address for second platform y value
LOAD r4 r3 # load y coordinate of second platform
CMP r1 r4 # compare first platform y to negative number
BLT .notDead
BUC .start

.notDead


# this code to be implemented right here

#check collisions
#check first platform x value in range
LUI $23 r3	#get x value of player
ADDI $112 r3
LOAD r1 r3   # puts x value of player in r1
ADDI $8 r3
LOAD r2 r3   # puts x value of platform 1 in r2
MOV r2 r4 # put x value of platform 1 in r4
ADDI $50 r2 # add 50 to the x value of platform 1 
CMP r2 r1 # cmp x value + 50 of platform 1 and x value of player
BLT .secondPlatform
SUBI $50 r4
CMP r4 r1 # cmp x value - 50 of platform 1 and x value of player
BGT .secondPlatform

# check if y value of player is in range of platform 1 
SUBI $4 r3 # move pointer to y value of player
LOAD r1 r3 # r1 is y value of player
ADDI $8 r3 # move pointer to y value of platform 1
LOAD r2 r3 # load platform 1 y value to r2
# figure out how to check if collision on y axis
#check if platform velocity is positive
LUI $128 r5
CMP r5 r8
BGE .noCollisions
#platform velocity should be positive
CMP r1 r2 #cmp player y to platform y
BGT .secondPlatform
SUB r8 r2 # get upper bounds of collision
CMP r1 r2
BLT .secondPlatform
# reset the velocity to full speed
LUI $255 r8
ADDI $1 r8 # this loads value -255 into the velocity register 
#jump to gameloop
BUC .gameloop

.secondPlatform
# repeat instructions from above
LUI $23 r3	#get x value of player
ADDI $112 r3
LOAD r1 r3   # puts x value of player in r1
ADDI $16 r3
LOAD r2 r3   # puts x value of platform 2 in r2
MOV r2 r4 # put x value of platform 1 in r4
ADDI $50 r2 # add 50 to the x value of platform 1 
CMP r2 r1 # cmp x value + 50 of platform 1 and x value of player
BLT .noCollisions
SUBI $50 r4
CMP r4 r1 # cmp x value - 50 of platform 1 and x value of player
BGT .noCollisions

#check y value of second platform
# check if y value of player is in range of platform 2 
SUBI $12 r3 # move pointer to y value of player
LOAD r1 r3 # r1 is y value of player
ADDI $16 r3 # move pointer to y value of platform 2
LOAD r2 r3 # load platform 2 y value to r2
# figure out how to check if collision on y axis
#check if platform velocity is positive
LUI $128 r5
CMP r5 r8
BGE .noCollisions
#platform velocity should be positive
CMP r1 r2 #cmp player y to platform y
BGT .noCollisions
SUB r8 r2 # get upper bounds of collision
CMP r1 r2
BLT .noCollisions
# reset the velocity to full speed
LUI $255 r8
ADDI $1 r8 # this loads value -255 into the velocity register 
#jump to gameloop
BUC .gameloop
.noCollisions

#jump back to check for button input
BUC .gameloop