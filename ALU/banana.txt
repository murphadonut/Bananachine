# starting loop

.start
#create player  player coordinate x = 80 y = 400
MOVI $80 r1
LUI $23 r3
ADDI $112 r3
STOR r1 r3
ADDI $4 r3
LUI $1 r5
ADDI $0 r5
STOR r5 r3

#create platforms
LUI $1 r2
ADDI $154 r2 # set platform 1 y coordinate 10 below the player
ADDI $4 r3
STOR r1 r3
ADDI $4 r3
STOR r2 r3
#platform 2
LUI $1 r1
ADDI $144 r1
MOVI $0 r2
ADDI $4 r3
STOR r1 r3
ADDI $4 r3
STOR r2 r3

#check button input
.loop
LUI $255 r3
ADDI $255 r3
LOAD r1 r3
MOVI $1 r2
CMP r1 r2
BNE .loop
LUI $23 r5
ADDI $136 r5
MOVI $0 r1
STOR r1 r5
MOVI $0 r8 # set velocity to zero
MOVI $0 r9 # load 0 into r9 for counting 

#gameloop to be run
.gameloop
# limit to only compute every 244times
LUI $128 r1
CMP r9 r1
MOVI $217 r1
JNE r1 
ADDI $0 r8
MOVI $0 r9


#check input buttons and move character
LUI $255 r2
ADDI $255 r2
LOAD r1 r2
CMP r0 r1
BEQ .noButton # jump as no buttons are pressed

MOVI $2 r2 # check if left
CMP r2 r1
BNE .rightCheck # jump if not left

#handle case where left is pushed
MOVI $0 r3
LUI $23 r3
ADDI $112 r3
LOAD r4 r3 #store player x coordinate in r4
ADDI $9 r4 #subtract 9 from x coordinate
STOR r4 r3 #store new x player value

#check if right
.rightCheck
MOVI $3 r2 # check if right
CMP r2 r1
BNE  .noButton # jump if not right
MOVI $0 r3
LUI $23 r3
ADDI $112 r3
LOAD r4 r3 #store player x coordinate in r4
SUBI $9 r4 #add 9 from x coordinate
STOR r4 r3 #store new x player value
.noButton


#move platforms up and down

LUI $23 r3
ADDI $124 r3 # memory location for y coordinate 1st platform
LOAD r4 r3
SUB r8 r4 #sub the speed from the 1st platform
STOR r4 r3
ADDI $8 r3
LOAD r4 r3
SUB r8 r4 #sub the speed from the 2nd platform
STOR r4 r3

#change velocity

ADDI $1 r8


#check collisions
#check first platform x value in range
LUI $23 r3	#get x value of player
ADDI $112 r3
LOAD r1 r3   # puts x value of player in r1
ADDI $8 r3
LOAD r2 r3   # puts x value of platform 1 in r2
MOV r2 r4 # put x value of platform 1 in r4
ADDI $50 r2 # add 50 to the x value of platform 1 
CMP r2 r1 # cmp x value + 50 of platform 1 and x value of player
BLT .secondPlatform
SUBI $50 r4
CMP r4 r1 # cmp x value - 50 of platform 1 and x value of player
BGT .secondPlatform

# check if y value of player is in range of platform 1 
SUBI $4 r3 # move pointer to y value of player
LOAD r1 r3 # r1 is y value of player
ADDI $8 r3 # move pointer to y value of platform 1
LOAD r2 r3 # load platform 1 y value to r2
# figure out how to check if collision on y axis
#check if platform velocity is positive
LUI $128 r5
CMP r5 r8
BGE .noCollisions
#platform velocity should be positive
CMP r1 r2 #cmp player y to platform y
BGT .secondPlatform
SUB r8 r2 # get upper bounds of collision
CMP r1 r2
BLT .secondPlatform
# reset the velocity to full speed
LUI $255 r8
ADDI $216 r8 # this loads value -40 into the velocity register 

#add point
LUI $23 r3
ADDI $136 r3
LOAD r6 r3
ADDI $1 r6
STOR r6 r3

#jump to gameloop
#BUC .gameloop

.secondPlatform
# repeat instructions from above
LUI $23 r3	#get x value of player
ADDI $112 r3
LOAD r1 r3   # puts x value of player in r1
ADDI $16 r3
LOAD r2 r3   # puts x value of platform 2 in r2
MOV r2 r4 # put x value of platform 1 in r4
ADDI $50 r2 # add 50 to the x value of platform 1 
CMP r2 r1 # cmp x value + 50 of platform 1 and x value of player
BLT .noCollisions
SUBI $50 r4
CMP r4 r1 # cmp x value - 50 of platform 1 and x value of player
BGT .noCollisions

#check y value of second platform
# check if y value of player is in range of platform 2 
SUBI $12 r3 # move pointer to y value of player
LOAD r1 r3 # r1 is y value of player
ADDI $16 r3 # move pointer to y value of platform 2
LOAD r2 r3 # load platform 2 y value to r2
# figure out how to check if collision on y axis
#check if platform velocity is positive
LUI $128 r5
CMP r5 r8
BGE .noCollisions
#platform velocity should be positive
CMP r1 r2 #cmp player y to platform y
BGT .noCollisions
SUB r8 r2 # get upper bounds of collision
CMP r1 r2
BLT .noCollisions
# reset the velocity to full speed
LUI $255 r8
ADDI $216 r8 # this loads value -40 into the velocity register 

#add point
LUI $23 r3
ADDI $136 r3
LOAD r6 r3
ADDI $1 r6
STOR r6 r3

#jump to gameloop
#BUC .gameloop
.noCollisions


#check if platforms out of bounds
#if out of bounds create new platform
LUI $23 r3	#get x value of platform 1
ADDI $120 r3
LOAD r1 r3       #put x value platform 1 in r1
ADDI $4 r3 
LOAD r2 r3 #put y value platform 1 in r2
LUI $3 r4
ADDI $232 r4 #move 480 to r4
CMP r4 r2 #cmp r4 and r2
BGT .secondSpawn


LUI $2 r5
ADDI $48 r5 # get column 4
CMP r1 r5 # see if platform 1 is in col 4
BEQ .columnone

LUI $2 r5
ADDI $48 r5 # set platform 1 to column 4 
LUI $23 r4  # load pointer to platform 2 y value
ADDI $132 r4	# load value 240
MOVI $100 r2
SUB r6 r2
LUI $23 r3	#get x value of platform 1 pointer x
ADDI $120 r3
STOR r5 r3
ADDI $4 r3
STOR r6 r3
BUC .secondSpawn



.columnone
LUI $23 r4  # load pointer to platform 2 y value
ADDI $132 r4	# load value 240
MOVI $100 r2
SUB r6 r2
MOVI $80 r5
LUI $23 r3	#get x value of platform 1 pointer x 
ADDI $120 r3
STOR r5 r3
ADDI $4 r3
STOR r6 r3


.secondSpawn
#if out of bounds create new platform
LUI $23 r3	#get x value of platform 2
ADDI $128 r3
LOAD r1 r3       #put x value platform 2 in r1
ADDI $4 r3 
LOAD r2 r3 #put y value platform 1 in r2
LUI $3 r4
ADDI $232 r4 #move 480 to r4
CMP r4 r2 #cmp r4 and r2
BGT .noSpawn

MOVI $240 r5 # get column 3
CMP r1 r5 # see if platform 2 is in col 3
BEQ .columnThree
BNE .columntwo


.columntwo
MOVI $240 r5 # set platform 2 to column 2 
ADDI $124 r4	# load value 240
MOVI $100 r2
SUB r6 r2
LUI $23 r3	#get x value of platform 2 pointer x
ADDI $128 r3
STOR r5 r3
ADDI $4 r3
STOR r6 r3
BUC .noSpawn



.columnThree
LUI $1 r5
ADDI $144 r5 # set platform 2 to column 2 
ADDI $124 r4	# load value 240
MOVI $100 r2
SUB r6 r2
LUI $23 r3	#get x value of platform 1 pointer x
ADDI $128 r3
STOR r5 r3
ADDI $4 r3
STOR r6 r3

.noSpawn

#check if player is out of bounds by checking if walls are above the screen
LUI $128 r1
LUI $23 r3
ADDI $124 r3
LOAD r4 r3 # load y coordinate of first platform
AND r1 r4
CMP r1 r4 # compare first platform y to negative number
BNE .notDead

LUI $128 r1
LUI $23 r3
ADDI $132 r3
LOAD r4 r3 # load y coordinate of second platform
AND r1 r4
CMP r1 r4 # compare second platform y to negative number
MOVI .start r1
JEQ r1

.notDead

.Count
ADDI $1 r9
MOVI .gameloop r1
JUC r1